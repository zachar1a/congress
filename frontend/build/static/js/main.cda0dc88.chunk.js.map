{"version":3,"sources":["Components/BillCard/BillCard.js","Components/Navbar/Navbar.js","Components/BillInfo/BillInfo.js","Components/Card/Card.js","Components/VoteResults/VoteResults.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["BillCard","className","this","props","sponsorParty","sponsor","sponsorState","billid","title","href","infoUrl","slug","React","Component","Navbar","to","BillInfo","state","bills","fetch","then","data","json","setState","console","log","billItems","map","bill","bill_id","sponsor_party","sponsor_name","sponsor_state","Card","chamber","name","style","color","result","action","VoteResults","results","resultItems","number","Result","Home","require","Link","Route","Switch","App","path","component","exact","Boolean","window","location","hostname","match","BrowserRouter","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cda0dc88.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./BillCard.css\";\n\nclass BillCard extends React.Component{\n\trender(){\n\t\t/*\n\t\t * This needs to be dynamic styling for \n\t\t * the result in props, red if failed,\n\t\t * green if passed\n\t\t *\n\t\t */\n\n\t\treturn (\n\t\t\t<div className=\"BillCard\">\n\t\t\t\t<h2>[{this.props.sponsorParty}] {this.props.sponsor} {this.props.sponsorState}</h2>\n\t\t\t\t<h3>{this.props.billid} {this.props.title}</h3>\n\t\t\t\t<a href={this.props.infoUrl}>{this.props.slug} Info</a>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default BillCard;\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nimport { Link } from \"react-router-dom\"\n\n\n\nclass Navbar extends React.Component{\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<ul className=\"navbar\">\n\t\t\t\t\t<li><Link to=\"/\">Home</Link></li>\n\t\t\t\t\t<li><Link to=\"/Bills\">Bills</Link></li>\n\t\t\t\t\t<li><Link to=\"/Votes\">Votes</Link></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t};\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport BillCard from \"../BillCard/BillCard\";\nimport Navbar from \"../Navbar/Navbar\";\n\nconst url = \"https://state-of-congress.herokuapp.com/api/info/\"\n\n//This is for testing the backend\n//const url = \"http://localhost:8000/api/info/\"\nclass BillInfo extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            bills: [],\n        };\n    }\n    componentDidMount(){\n        fetch(url)\n        .then(data=> data.json())\n        .then(data=>this.setState({bills:data}));\n        console.log(this.state.bills);\n    }\n\n    render(){\n        const billItems = this.state.bills.map((bill)=>{\n            return(\n\t\t    <BillCard billid={bill.bill_id} \n\t\t    \t      title={bill.title}\n\t\t    \t      sponsorParty={bill.sponsor_party}\n\t\t    \t      sponsor={bill.sponsor_name}\n\t\t    \t      sponsorState={bill.sponsor_state}\n\t\t    \t      infoUrl={bill.infoUrl}\n\t\t    \t      slug={bill.slug}/>\n            );\n         });\n        return[\n\t\t<Navbar />,\n\t\tbillItems\n\t]\n        };\n}\n\nexport default BillInfo;\n","import React from \"react\";\nimport \"./Card.css\";\n\nclass Card extends React.Component{\n\trender(){\n\t\t/*\n\t\t * This needs to be dynamic styling for \n\t\t * the result in props, red if failed,\n\t\t * green if passed\n\t\t *\n\t\t */\n\n\t\tconst resultStyle={\n\t\t\tcolor:\"green\"\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"card\">\n\t\t\t\t<h2>{this.props.chamber} {this.props.name}</h2>\n\t\t\t\t<h4>{this.props.title}</h4>\n\t\t\t\t<h3><span style={resultStyle}>{this.props.result}</span> {this.props.action}</h3>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport Navbar from \"../Navbar/Navbar\";\n\nconst url = \"https://state-of-congress.herokuapp.com/api/results/\"\n\n//This is for testing the backend\n//const url = \"http://localhost:8000/api/results/\"\nclass VoteResults extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            results: [],\n        };\n    }\n    componentDidMount(){\n        fetch(url)\n        .then(data=> data.json())\n        .then(data=>this.setState({results:data}));\n        console.log(this.state.results);\n    }\n\n    render(){\n        const resultItems = this.state.results.map((result)=>{\n            return(\n\t\t    <Card name={result.number} title={result.title} chamber={result.chamber} result={result.Result} action={result.action} />\n\t\t    /*\n                <div className=\"resultCard\">\n\t\t    <br/>\n                    <br/>Number: <i>{result.number}</i> \n\t\t    <br/>Title: <b>{result.title}</b>\n\t\t    \t<br/><a href={result.Source}>Congressional Votes</a>\n                        <br/>Action: {result.action}\n                        <br/>Result: {result.Result}\n\t\t    <br/>\n                </div>\n\t    */\n            );\n         });\n        return[\n\t\t<Navbar />\n            \t,resultItems\n\t];\n        };\n}\n\nexport default VoteResults;\n","import React from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\n\nimport \"./Home.css\";\n\nconst Link = require(\"react-router-dom\").Link;\n\nclass Home extends React.Component{\n\n\n    render(){\n            return(\n\t\t    <div>\n\t\t    \t<h2 className=\"title\">State Of Congress</h2>\n\t\t    \t<Navbar />\n\t\t    </div>\n            );\n        };\n}\n\nexport default Home;\n","import React from \"react\";\nimport BillInfo from './Components/BillInfo/BillInfo'\nimport VoteResults from './Components/VoteResults/VoteResults'\nimport Home from './Components/Home/Home'\nimport './App.css';\n\n\nconst Route = require(\"react-router-dom\").Route;\nconst Switch = require(\"react-router-dom\").Switch;\n\n\nfunction App() {\n\t/*\n\tconst voteTitleStyle={\n\t\twidth:\"40%\",\n\t\tmargin:\"auto\"\n\t};\n\tconst BillTitleStyle={\n\t\twidth:\"40%\",\n\t\tmargin:\"auto\"\n\t};\n\t*/\n  return (\n    <div className=\"App\">\n\t  <main>\n\t  <Switch>\n\t \t<Route path=\"/\" component={Home} exact/>\n\t \t<Route path=\"/Bills\" component={BillInfo} exact/>\n\t \t<Route path=\"/votes\" component={VoteResults} exact/>\n\t  </Switch>\n\t  </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst BrowserRouter = require(\"react-router-dom\").BrowserRouter;\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}